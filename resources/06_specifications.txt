http://web.mit.edu/6.005/www/fa15/classes/06-specifications/

1. Προδιαγραφές (Specifications)
Περιγράφουν τα απαιτούμενα για ένα λογισμικό σύμφωνα με τα οποία ο προγραμματιστής θα πρέπει να υλοποιήσει. Το λογισμικό μπορεί να είναι μια μέθοδος, μία κλάση ή κάτι μεγαλύτερης κλίμακας.

2. Γιατί χρειάζονται οι προδιαγραφές
Τα περισσότερα λάθη προέρχονται από μη προδιαγραφές ή περιγραφές για τη λειτουργία και συμπεριφορά που πρέπει να έχει για παράδειγμα μια μέθοδος.

3. Παράδειγμα
Το παρακάτω παράδειγμα δείχνει τη μέθοδο add της BigInteger όπως τη δίνει η Oracle (jdk 8).

    /**
     * Returns a BigInteger whose value is {@code (this + val)}.
     *
     * @param  val value to be added to this BigInteger.
     * @return {@code this + val}
     */
    public BigInteger add(BigInteger val) {
        if (val.signum == 0)
            return this;
        if (signum == 0)
            return val;
        if (val.signum == signum)
            return new BigInteger(add(mag, val.mag), signum);
        int cmp = compareMagnitude(val);
        if (cmp == 0)
            return ZERO;
        int[] resultMag = (cmp > 0 ? subtract(mag, val.mag)
                           : subtract(val.mag, mag));
        resultMag = trustedStripLeadingZeroInts(resultMag);
        return new BigInteger(resultMag, cmp == signum ? 1 : -1);
    }

Χωρίς περιγραφή και μόνο με τον κώδικα θα ήταν δύσκολο να καταλάβουμε τι ακριβώς κάνει αυτή η μέθοδος.
Ο προγραμματιστής μπορεί να δουλέψει ελεύθερα και να αλλάξει ακόμα τον κώδικα χωρίς να χρειάζεται να ενημερώσει τι ακριβώς κάνει, αρκεί να λειτουργεί σωστά.

2. Ισοδύναμες μέθοδοι
Οι δύο παρακάτω μέθοδοι έχουν την ίδια λειτουργία. 
Βρίσκουν αν ένας αριθμός υπάρχει μέσα σε έναν πίνακα και επιστρέφουν το αντίστοιχο index αλλά διαφορετικά υλοποιημένες.

static int findFirst(int[] arr, int val) {
    for (int i = 0; i < arr.length; i++) {
        if (arr[i] == val) return i;
    }
    return arr.length;
}

static int findLast(int[] arr, int val) {
    for (int i = arr.length -1 ; i >= 0; i--) {
        if (arr[i] == val) return i;
    }
    return -1;
}

Ποιές είναι οι διαφορές και πως συμπεριφέρονται σε ορισμένες οριακές περιπτώσεις;
i. Η findFirst επιστρέφει τον πρώτο index ενώ η findLast τον τελευταίο, άρα διαφορετικά index αν υπάρχουν πάνω από δύο εμφανίσεις της val.
ii. Αν το val δεν υπάρχει στον πίνακα η findFirst επιστρέφει το arr.length ενώ η findLast το -1.

Άσκηση
Να υλοποιηθεί η  μέθοδος: static int find(int[] arr, int val)
που θα ικανοποιεί τις παρακάτω προδιαγραφές.
- Το val να υπάρχει μόνο μια φορά στον πίνακα arr.
- Να επιστρέφει το index i όταν arr[i] = val.
- Να επιστρέφει ένα μη έγκυρο index αν δεν υπάρχει το val στο arr.

2. Δομή προδιαγραφών
Οι προδιαγραφές ως προς τη δομή τους χωρίζονται σε προ-συνθήκες (preconditions) και μετα-συνθήκες (postconditions).
Οι προ-συνθήκες περιγράφουν τι πρέπει να υλοποιηθεί και έχουν σχέση περισσότερο με το input (αναφέρονται και ως requires).
Οι μετα-συνθήκες περιγράφουν ποιό πρέπει να είναι το αποτέλεσμα και έχουν σχέση περισσότερο με το output (αναφέρονται και ως effects).

Άσκηση
Εστω η static int find(int[] arr, int val)
και οι παρακάτω προδιαγραφές:
requires: η val εμφανίζεται μόνο μία φορά στον arr
effects: επιστρέφει το index i για το οποίο ισχύει arr[i] = val
Ως προγραμματιστής ποιες από τις παρακάτω επιλογές θεωρείτε λογικές

return 0 αν ο arr είναι κενός (χωρίς στοιχεία)
αν ο arr είναι κενός να πετάει (throw) μια εξαίρεση (exception)
αν η val εμφανίζεται δύο φορές να πετάει μια εξαίρεση
αν η val εμφανίζεται δύο φορές να μηδενίζεται ο πίνακας και να πετάει μια εξαίρεση
αν ο arr δεν είναι κενός και η val εμφανίζεται πάνω από μία φορά να κάνει return το πρώτο index
αν η val βρεθεί στη θέση arr[0], τότε επιστρέφει 0

Οι προδιαγραφές στη java (javadoc)
Η java χρησιμοποεί τις δικές της συμβάσεις για τις προδιαγραφές.
Για τις προδιαγραφές η java χρησιμοποιεί τον όρο javadoc από το java και το σύντομο documentation.
Σύμφωνα με αυτές οι παράμετροι περιγράφονται με το "@param" πρίν την περιγραφή, και οι επιστροφές με @return και @throws.
Γενικά για τις προ-συνθήκες χρησιμοποιούμε το @param ενώ για τις μετά-συνθήκες τα @return και @throws.
Έτσι, για την παραπάνω άσκηση οι προδιαγραφές της static int find(int[] arr, int val):
requires: η val εμφανίζεται μόνο μία φορά στον arr
effects: επιστρέφει το index i για το οποίο ισχύει arr[i] = val
θα εμφανίζονταν στην java ως εξής:
/**
 * Find a value in an array.
 * @param arr array to search, requires that val occurs exactly once  in arr
 * @param val value to search for
 * @return index i such that arr[i] = val
 */
static int find(int[] arr, int val)

Στη συνέχεια γίνεται αναφορά για τη μορφή και τους κανόνες που πρέπει να χρησιμοποιούμε όταν προσθέτουμε javadoc στον κώδικα.
- Οι προδιαγραφές ή σημειώσεις Javadoc εισάγωνται όπως και οι σημειώσεις πολλών γραμμών με τη διαφορά ότι αρχίζουν με διπλό αστερίσκο (/**)‪
- Οι προδιαγραφές προηγούνται των δηλώσεων των κλάσεων, διεπαφών, μεθόδων και πεδίων.
- Στην περιγραφή μπορεί να υπάρχουν ετικέτες html.
- Η αρχική περιγραφή πρέπει να είναι συνοπτική αλλά και περιεκτική.
- Για την περιγραφή μιας μεθόδου ξεκινάμε πάντα με ένα ρήμα π.χ.: Determine whether this container is empty or not.
- Αποφεύγουμε τις συντμήσεις.
- Χρησιμοποιούνται συγκεκριμένες λέξεις με το προθεμα (@) για την περιγραφή συγκεκριμένων εννοιών.  Οι λέξεις λέγονται Javadoc tags.

Αυτές είναι:
- @author name (χρησιμοποιούνται σε διεπαφές και κλάσεις).
- @since version  (χρησιμοποιούνται σε διεπαφές και κλάσεις).
- @version description  (χρησιμοποιούνται σε διεπαφές και κλάσεις).
- @deprecated  (χρησιμοποιούνται σε διεπαφές, κλάσεις και μεθόδους).
- @param name description (χρησιμοποιούνται σε μεθόδους).
- @return description (χρησιμοποιούνται σε μεθόδους).
- @throws exception description (χρησιμοποιούνται σε μεθόδους).
- @see classname (χρησιμοποιούνται παντού).
- @see classname#member  (χρησιμοποιούνται παντού).

3. Η σειρά των Javadoc tags
Η σειρά που πρέπει να ακολουθείται είναι η παρακάτω:

    @author
    @version
    @param
    @return
    @throws
    @see
    @since
    @deprecated

3. Πολλαπλά Javadoc tags
Τα παρακάτω tags πρέπει να υπάρχουν μόνο μέχρι μία φορά σε μια προδιαγραφή.

    @author
    @param
    @throws

2. Το εργαλείο Javadoc
Με το εργαλείο αυτό μπορούμε να παράξουμε ένα html έγγραφο το οποίο θα τεκμηριώνει τις κλάσεις, τις διεπαφές, τις μεθόδους και τα πεδία σύμφωνα με τις κανονικές αλλά και τις Javadoc σημειώσεις που έχουμε περάσει στον κώδικα.

Για περισσότερες πληροφορίες 
http://javaworkshop.sourceforge.net/chapter4.html
http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html

